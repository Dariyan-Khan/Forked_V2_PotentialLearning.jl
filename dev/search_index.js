var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [PotentialLearning]","category":"page"},{"location":"functions/#PotentialLearning.BornMayer","page":"Functions","title":"PotentialLearning.BornMayer","text":"Born-Mayer Potential\n\n\n\n\n\n","category":"type"},{"location":"functions/#PotentialLearning.BornMayer-Tuple{Dict}","page":"Functions","title":"PotentialLearning.BornMayer","text":"BornMayer(params::Dict)\n\nCreates a BM potential.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.Coulomb","page":"Functions","title":"PotentialLearning.Coulomb","text":"Coulomb Potential\n\n\n\n\n\n","category":"type"},{"location":"functions/#PotentialLearning.Coulomb-Tuple{Dict}","page":"Functions","title":"PotentialLearning.Coulomb","text":"Coulomb(params::Dict)\n\nCreates a Coulomb potential.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.GaN","page":"Functions","title":"PotentialLearning.GaN","text":"GaN Potential\n\nSee 10.1088/1361-648X/ab6cbe\n\n\n\n\n\n","category":"type"},{"location":"functions/#PotentialLearning.LennardJones","page":"Functions","title":"PotentialLearning.LennardJones","text":"Lennard-Jones Potential\n\n\n\n\n\n","category":"type"},{"location":"functions/#PotentialLearning.LennardJones-Tuple{Dict}","page":"Functions","title":"PotentialLearning.LennardJones","text":"LennardJones(params::Dict)\n\nCreates the LennardJones potential.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.SNAP_LAMMPS","page":"Functions","title":"PotentialLearning.SNAP_LAMMPS","text":"SNAP_LAMMPS is a PotentialLearningProblem, it is based on the SNAP \nimplementation of LAMMPS, which is accessed through LAMMPS.jl.\nMathematical formulation: A. P. Thompson et al. (10.1016/j.jcp.2014.12.018)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PotentialLearning.SNAP_LAMMPS-Tuple{Vector{Float64}, Vector{Float64}, Dict}","page":"Functions","title":"PotentialLearning.SNAP_LAMMPS","text":"SNAP_LAMMPS(dft_data::Vector{Float64}, ref_data::Vector{Float64}, params::Dict)\n\nCreates a SNAP_LAMMPS.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.ZBL","page":"Functions","title":"PotentialLearning.ZBL","text":"Ziegler-Biersack-Littmark (ZBL) Potential\n\nSee https://docs.lammps.org/pair_zbl.html\n\n\n\n\n\n","category":"type"},{"location":"functions/#PotentialLearning.ZBL-Tuple{Dict}","page":"Functions","title":"PotentialLearning.ZBL","text":"ZBL(params::Dict)\n\nCreates a ZBL potential.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.S-Tuple{PotentialLearning.ZBL, Float64}","page":"Functions","title":"PotentialLearning.S","text":"S(r)\n\nSwitching function that ramps the energy, force, and curvature smoothly to zero between an inner and outer cutoff. Here, the inner and outer cutoff are the same for all pairs of atom types.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.atom_type-Tuple{Int64}","page":"Functions","title":"PotentialLearning.atom_type","text":"atom_type(i::Int64)\n\nReturns the atom type of the i-th atom of the configuration.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.calc_A-Tuple{PotentialLearning.SNAP_LAMMPS}","page":"Functions","title":"PotentialLearning.calc_A","text":"calc_A(params::Dict, p::SNAP_LAMMPS)\n\nCalculates the matrix A (See Eq. 13, 10.1016/j.jcp.2014.12.018). This calculation requires accessing the SNAP implementation of LAMMPS.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.error-Tuple{Vector{Float64}, PotentialLearning.SNAP_LAMMPS}","page":"Functions","title":"PotentialLearning.error","text":"error(β::Vector{Float64}, s::SNAP_LAMMPS)\n\nError function needed to perform the learning process.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.error_metrics-Tuple{PotentialLearning.PotentialLearningProblem, Vector{Float64}, Dict}","page":"Functions","title":"PotentialLearning.error_metrics","text":"error_metrics(p::PotentialLearningProblem, val_data::Vector{Float64}, params::Dict)\n\nCalculates error metrics: maxrelerror, mae, rmse\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.forces-Tuple{PotentialLearning.Potential, Vector{StaticArrays.SVector{3, Float64}}, Float64}","page":"Functions","title":"PotentialLearning.forces","text":"forces(p::Potential, atomic_positions::Vector{Position}, rcutfac::Float64)\n\nCalculates the forces of each atom in an atomic configuration.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.forces-Tuple{PotentialLearning.PotentialLearningProblem, Int64}","page":"Functions","title":"PotentialLearning.forces","text":"forces(p::Potential, j::Int64)\n\nCalculates the forces of a particular atomic configuration (j) using the  fitted parameters β.  This calculation requires accessing the SNAP implementation of LAMMPS. See https://docs.lammps.org/computesnaatom.html#compute-snad-atom-command\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.generate_data-Tuple{String, Dict}","page":"Functions","title":"PotentialLearning.generate_data","text":"generate_data(params::Dict)\n\nGenerates DFT/reference data based on a particular potential.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.generate_data_aux-Tuple{PotentialLearning.Potential, Vector{T} where T, Int64, Int64, Float64, Bool}","page":"Functions","title":"PotentialLearning.generate_data_aux","text":"generate_data_aux(p::Potential, positions_per_conf::Vector,\n                  a::Int64, b::Int64, rcutfac::Float64, fit_forces::Bool)\n\nAuxiliar function. See generate_data.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.get_bispectrums-Tuple{Any, String, PotentialLearning.SNAP_LAMMPS}","page":"Functions","title":"PotentialLearning.get_bispectrums","text":"get_bispectrums(lmp, data_path::String, p::SNAP_LAMMPS)\n\nCalculates the bispectrums components and its derivatives. See https://docs.lammps.org/computesnaatom.html\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.get_conf_params-Tuple{String}","page":"Functions","title":"PotentialLearning.get_conf_params","text":"get_conf_params(path::String)\n\nLoads configuration parameters.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.learn-Tuple{PotentialLearning.PotentialLearningProblem, Dict}","page":"Functions","title":"PotentialLearning.learn","text":"learn(p::PotentialLearningProblem, params::Dict)\n\nFits the potentials, forces, and stresses against the DFT and reference data using the configuration parameters.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.learning_problem-Tuple{Vector{Float64}, Vector{Float64}, Dict}","page":"Functions","title":"PotentialLearning.learning_problem","text":"learning_problem( dft_train_data::Vector{Float64},\n                  ref_train_data::Vector{Float64},\n                  params::Dict)\n\nCreates a potential learning problem.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.linearize-Tuple{Vector{Vector{StaticArrays.SVector{3, Float64}}}}","page":"Functions","title":"PotentialLearning.linearize","text":"linearize(data::Vector{Force})\n\nLinearizes a vector of forces. E.g. [Force(1.0,2.0,3.0), Force(4.0,5.0,6.0)] => [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.load_positions_per_conf-Tuple{String, Int64, Int64, Int64}","page":"Functions","title":"PotentialLearning.load_positions_per_conf","text":"load_positions_per_conf(path::String, no_atoms_per_conf::Int64,\n                        no_conf_init::Int64, no_conf_end::Int64)\n\nLoads atomic positions per configuration.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.potential_energy-Tuple{PotentialLearning.BornMayer, StaticArrays.SVector{3, Float64}, Vararg{Any, N} where N}","page":"Functions","title":"PotentialLearning.potential_energy","text":"potential_energy(p::BornMayer, r::Position, args...)\n\nCalculates Born-Mayer potential energy.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.potential_energy-Tuple{PotentialLearning.Coulomb, StaticArrays.SVector{3, Float64}, Vararg{Any, N} where N}","page":"Functions","title":"PotentialLearning.potential_energy","text":"potential_energy(p::Coulomb, r::Position, args...)\n\nCalculates Coulomb potential energy.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.potential_energy-Tuple{PotentialLearning.GaN, StaticArrays.SVector{3, Float64}, Vararg{Any, N} where N}","page":"Functions","title":"PotentialLearning.potential_energy","text":"potential_energy(p::GaN, r::Position, args...)\n\nCalculates GaN potential energy.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.potential_energy-Tuple{PotentialLearning.LennardJones, StaticArrays.SVector{3, Float64}, Vararg{Any, N} where N}","page":"Functions","title":"PotentialLearning.potential_energy","text":"potential_energy(p::LennardJones, r::Position, args...)\n\nCalculates LennardJones potential energy.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.potential_energy-Tuple{PotentialLearning.Potential, Vector{StaticArrays.SVector{3, Float64}}, Float64}","page":"Functions","title":"PotentialLearning.potential_energy","text":"potential_energy(p::Potential, atomic_positions::Vector{Position}, rcutfac::Float64)\n\nCalculates the potential energy of a particular atomic configuration. It is based on the atomic positions of the configuration, the rcutfac, and a particular potential.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.potential_energy-Tuple{PotentialLearning.PotentialLearningProblem, Int64}","page":"Functions","title":"PotentialLearning.potential_energy","text":"potential_energy(p::Potential, j::Int64)\n\nCalculates the potential energy of a particular atomic configuration (j) using the fitted parameters β.  This calculation requires accessing the SNAP implementation of LAMMPS.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.potential_energy-Tuple{PotentialLearning.ZBL, StaticArrays.SVector{3, Float64}, Vararg{Any, N} where N}","page":"Functions","title":"PotentialLearning.potential_energy","text":"potential_energy(p::ZBL, r::Position, args...)\n\nCalculates the potential energy of ZBL with a switching function.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.zbl-Tuple{PotentialLearning.ZBL, Float64}","page":"Functions","title":"PotentialLearning.zbl","text":"zbl(p::ZBL, r::Float64)\n\nZBL function without the switching function S.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PotentialLearning.ϕ-Tuple{PotentialLearning.ZBL, Float64}","page":"Functions","title":"PotentialLearning.ϕ","text":"ϕ(p::ZBL, x::Float64)\n\nAuxiliary function, necessary to calculate ZBL.\n\n\n\n\n\n","category":"method"},{"location":"#[WIP]-PotentialLearning.jl:-The-Julia-Library-of-Molecular-Dynamics-Potentials","page":"Home","title":"[WIP] PotentialLearning.jl: The Julia Library of Molecular Dynamics Potentials","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An Open Source library for active training and fast calculation of molecular dynamics potentials for atomistic simulations of materials. ","category":"page"},{"location":"#Features-under-development","page":"Home","title":"Features under development","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Surrogate DFT data generation\nGallium nitride model\nIntegration with GalacticOptim.jl to perform the optimization process\nIntegration with LAMMPS.jl to access the SNAP implementation of LAMMPS\nImplementation of a pure Julia version of SNAP\nGPU implementation using KernelAbstractions.jl","category":"page"},{"location":"#Installation-instructions","page":"Home","title":"Installation instructions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install PotentialLearning.jl in Julia follow the next steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Type julia in your terminal and press ]\n] add PotentialLearning.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: this package is not currenlty registered","category":"page"},{"location":"#How-to-setup-and-run-your-experiment","page":"Home","title":"How to setup and run your experiment","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Load configuration parameters, DFT and reference data, and the potential learning problem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"    params = get_conf_params(\"../examples/GaN-SNAP-LAMMPS/\")\n\n    # Get DFT data\n    dft_train_data, dft_val_data = generate_data(\"dft\", params)\n\n    # Get reference data\n    ref_train_data, ref_val_data = generate_data(\"ref\", params)\n\n    # Get potential learning problem (e.g. A β = b)\n    snap = learning_problem(dft_train_data, ref_train_data, params)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fit the potentials, forces, and stresses against the DFT and reference data using the configuration parameters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"    # Solve potential learning problem (e.g. β = A \\ b)\n    learn(snap, params)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Validate trained potentials, forces, and stresses.","category":"page"},{"location":"","page":"Home","title":"Home","text":"    # Validate potentials, forces, and stresses\n    rel_error = validate(snap, dft_val_data - ref_val_data, params)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage)","category":"page"}]
}
